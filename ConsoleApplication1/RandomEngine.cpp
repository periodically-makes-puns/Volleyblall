#include "RandomEngine.h"

short table[6][20][20] = {
    {{0, 0, 0, 0, 0, 1, 1, 1, 1, 1}, {0, 0, 0, 0, 0, 1, 1, 1, 1, 1}, {0, 0, 0, 0, 1, 1, 1, 1, 1, 1}, {0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, {0, 0, 1, 1, 1, 1, 1, 1, 1, 2}, {0, 1, 1, 1, 1, 1, 1, 1, 1, 2}, {0, 1, 1, 1, 1, 1, 1, 1, 2, 2}, {0, 0, 1, 1, 1, 2, 2, 2, 2, 3}, {0, 0, 2, 2, 2, 2, 2, 2, 3, 3}, {0, 0, 2, 2, 2, 2, 3, 3, 3, 3}, {0, 2, 2, 2, 3, 3, 3, 3, 3, 3}},
	{{0, 0, 0, 0, 0, 0, 1, 1, 1, 2}, {0, 0, 0, 0, 1, 1, 1, 1, 2, 2}, {0, 0, 0, 1, 1, 1, 1, 2, 2, 2}, {0, 0, 0, 1, 1, 1, 2, 2, 2, 2}, {0, 0, 1, 1, 1, 1, 2, 2, 2, 2}, {0, 0, 1, 1, 1, 2, 2, 2, 2, 2}, {0, 0, 1, 1, 2, 2, 2, 2, 2, 2}, {0, 0, 1, 2, 2, 2, 2, 2, 2, 2}, {0, 1, 1, 2, 2, 2, 2, 2, 2, 3}, {0, 1, 2, 2, 2, 2, 2, 2, 2, 3}, {0, 1, 2, 2, 2, 2, 2, 2, 3, 3}},
    {{0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 6, 6, 6, 6}, {0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 6, 6, 6, 6}, {0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 6, 6, 6, 6}, {0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 6, 6, 6, 6}, {0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 6}, {0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 6, 6, 6, 6}, {0, 0, 1, 2, 2, 3, 3, 3, 3, 4, 6, 6, 6, 6}, {0, 0, 1, 2, 2, 3, 3, 3, 4, 5, 6, 6, 6, 6}, {0, 1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6}, {0, 1, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6}, {0, 1, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6}},
    {{0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, {0, 0, 0, 0, 0, 0, 1, 1, 1, 2}, {0, 0, 0, 0, 1, 1, 1, 2, 2, 2}, {0, 0, 0, 1, 1, 2, 2, 2, 2, 2}, {0, 0, 0, 1, 2, 2, 2, 2, 2, 2}, {0, 0, 1, 2, 2, 2, 2, 2, 2, 2}, {0, 0, 1, 2, 2, 2, 2, 2, 2, 2}, {0, 1, 1, 2, 2, 2, 2, 2, 2, 2}, {0, 1, 1, 2, 2, 2, 2, 2, 2, 2}, {1, 1, 2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2, 2, 2}},
    {{0, 0, 0, 0, 0, 1, 1, 1, 2, 3, -1, -1, -1, -1}, {0, 0, 0, 0, 1, 1, 1, 2, 3, -1, -1, -1, -1}, {0, 0, 0, 1, 1, 1, 2, 3, -1, -1, -1, -1}, {0, 0, 1, 1, 1, 1, 2, 3, -1, -1, -1, -1}, {0, 0, 1, 1, 1, 2, 2, 3, -1, -1, -1, -1}, {0, 0, 1, 1, 1, 2, 2, 3, -1, -1, -1, -1}, {0, 1, 1, 1, 2, 2, 3, 3, -1, -1, -1, -1}, {0, 1, 1, 1, 2, 2, 3, 3, -1, -1, -1, -1}, {0, 1, 1, 2, 2, 2, 3, 3, -1, -1, -1, -1}, {0, 1, 1, 2, 2, 3, 3, 3, -1, -1, -1, -1}, {0, 1, 2, 2, 3, 3, 3, 3, -1, -1, -1, -1}}
};

RandomEngine::RandomEngine() {
    std::random_device rd;
    gen = std::mt19937_64(rd());
}

double RandomEngine::getReal() {
    return std::generate_canonical<double, 20>(gen);
}

short RandomEngine::roll(Action ID, short skl, short extra) {
    assert(ID != Action::PSS);
    assert(0 <= skl && skl <= 10);
    short normal = (ID == Action::BLK) ? std::max(8, 10 - skl) : 10;
    assert(normal + extra <= sizeof(table[(int)ID][skl]) / sizeof(short));
    std::uniform_int_distribution<> roll(0, normal + extra - 1);
    return table[(int)ID][skl][roll(gen)];
}